#[allow(dead_code)]
mod utils;
use std::{
    collections::{HashMap, HashSet},
};

#[allow(unused_imports)]
use crate::utils::*;

fn main() {
    // let input = _get_test_input_small();
    // let input = _get_test_input();
    let input = _get_input();

    // ----------- Parse Input -----------

    let parsed = input.trim();
    let grid = Grid::from_str(parsed);

    let mut elves = HashSet::<(isize, isize)>::new();
    for ((x, y), c) in grid.iter() {
        if *c == '#' {
            elves.insert((x as isize, y as isize));
        }
    }

    // ----------- Solve -----------

    let dir_checks = vec![
        [(-1, -1), (0, -1), (1, -1)], // N
        [(-1, 1), (0, 1), (1, 1)],    // S
        [(-1, -1), (-1, 0), (-1, 1)], // W
        [(1, -1), (1, 0), (1, 1)],    //  E
    ];
    let dirs = vec![(0, -1), (0, 1), (-1, 0), (1, 0)];
    let dirs_diag = vec![
        (0, -1),
        (0, 1),
        (-1, 0),
        (1, 0),
        (-1, -1),
        (1, -1),
        (-1, 1),
        (1, 1),
    ];

    let mut start_dir = 0;
    let mut count = 0;
    let mut p1_blanks = 0;
    loop {
        let mut proposals = HashMap::<(isize, isize), Vec<(&isize, &isize)>>::new();
        for (ex, ey) in elves.iter() {
            // Surrounded by blanks?
            if dirs_diag.iter().all(|(dx, dy)| {
                let (nx, ny) = (*ex as isize + dx, *ey as isize + dy);
                return !elves.contains(&(nx, ny));
            }) {
                proposals.insert((*ex, *ey), vec![(ex, ey)]);
                continue;
            }

            // Try to move
            let mut dir_n = start_dir;
            let mut proposed = false;
            for _ in 0..4 {
                let dir = dirs[dir_n];
                let checks = dir_checks[dir_n];
                if checks.iter().all(|(dx, dy)| {
                    let (nx, ny) = (*ex as isize + dx, *ey as isize + dy);
                    return !elves.contains(&(nx, ny));
                }) {
                    let (nx, ny) = (*ex as isize + dir.0, *ey as isize + dir.1);
                    if let Some(vec) = proposals.get_mut(&(nx, ny)) {
                        vec.push((ex, ey));
                    } else {
                        proposals.insert((nx, ny), vec![(ex, ey)]);
                    }
                    proposed = true;
                    break;
                }

                dir_n = (dir_n + 1) % 4;
            }
            if !proposed {
                proposals.insert((*ex, *ey), vec![(ex, ey)]);
            }
        }

        // Resolve proposals
        let mut next_elves = HashSet::new();
        for ((nx, ny), elves) in proposals {
            if elves.len() == 1 {
                next_elves.insert((nx, ny));
            } else {
                for (ex, ey) in elves {
                    next_elves.insert((*ex, *ey));
                }
            }
        }
        count += 1;
        if next_elves.eq(&elves) {
            break;
        }
        elves = next_elves;
        start_dir = (start_dir + 1) % 4;

        // Calculate p1
        if count == 10 {
            let grid = Grid::from_points(
                elves
                    .iter()
                    .map(|c| (*c, '#'))
                    .collect::<Vec<((isize, isize), char)>>(),
                '.',
            );
            p1_blanks = grid
                .iter()
                .fold(0, |s, (_, c)| if *c == '.' { s + 1 } else { s });
        }
    }

    // ----------- Print -----------

    println!("Part 1: {}", p1_blanks);
    println!("Part 2: {}", count);
}

fn _get_test_input_small() -> String {
    return "
.....
..##.
..#..
.....
..##.
.....
"
    .to_string();
}

fn _get_test_input() -> String {
    return "
..............
..............
.......#......
.....###.#....
...#...#.#....
....#...##....
...#.###......
...##.#.##....
....#..#......
..............
..............

"
    .to_string();
}

fn _get_input() -> String {
    return "

.#.....####..##.#.#.####.####.##....#...###...##...#.#..###.##.....#.#
.##..##.#.#...####....#.###....##..######...#..#...#..####...#...#.###
#...#.###...#...###.##.....##.#.#....#..###..#.##..........#....###.##
##..#...###..####.#.#.###..###...##.#....##....###.#.##.##.#.###.###.#
##.#..#..###.#.#.####.#..#.#.####..###.#.#.#.##.#...#.#..#..#####..##.
...####..#.#.####.#.#.##.###.#.#.#.##...#..#.####..#.#.#.##.......###.
..###.#.###...##.######......#.##........#.##......#....#...##.#.##..#
#....###..##.#####..##.#######....##.#..##.##..#..##..##.###.......#.#
#.#....###.#..#...####...##.##.#....#.#.#.#...##..##........#.#.###.##
..#....##....####...##.#.##..###.##.#..##...##.##.##..##..#.#.###...##
##.##.#..###.#.##..#....###...####....#.#.#.####.##.##.#....##...#.###
##.####...#....#....#.#.#.#...#...#...####.###..#.#..##.##..##.#.#....
##...#####...#.#....##....##..#.........#.#..#######.#.##.#.....#.....
##....#..#....##.##..########.#...#....#..###...#....#.#.#..#.##.....#
..##..#....##..#.#..###...#..###.#.##..##....#..#.##...####.##.##...#.
#...##..##.###..##....#.##..##.#.......####.#.#.#.###..#.#...#..###.##
.##..##.#.##.#.#.#####.#.#.#...#..##..##.##.##..#.##...#####.##..##.##
.##..###.#..###.#...##.###......##..#.###..#########....##.##.#..##.#.
.##.#.##.#.#..#.....##.###.#..##......#.##...#....###.##..##.#....#..#
#..#..##...#.#....###..#..####.#..##.######.#..#.#....##.##.#.#.###..#
#......#.##..#..##.#.#..##..#...###.#.####..##..##.#..#.##.#..##..#..#
#..#.###....#..#.......#####.##.#..####.#.##...##..##.####.####.....##
#.#..#...###.##...####.###..#.######.##.##..#.###.#..#.#.#######......
.####.#..........####.#.#.#....#...#...#..#..#...#.###.#..##..###..#..
.###.#...####.#.#.#.#..###.#..####..##.####.###..#...#...##..#.#.###..
##....#.#....##..####..##.#.#.##...#.#.#...#.#.#.#....##.....###..##..
......#.#..###..##.#.#..#.##.####...####..####......#.##.#.#..##......
#...########.##.##..##.#..###.##.#.#..#...##.#.#..###.##.#..#..#.##.##
##..#.##.###.##...##.##....#.#.#..#...##.####..#.#####.####.###.#..#.#
##.#.#....###.#......#..##..####...###.......##.....#...#...###..####.
###..#####.#.#....##......##..#...#......#.##.####.#.####..###.#.#.###
#.#..#.###.#....#.##....###.###.#.##..##.#..####..###...#...#..####...
#....##.#.#...#..#...#########.###.#.....#..#..#..#.###...#.##...###.#
##...#....#.###.#####...##.##..#..#.##.##..###.#..#..######.#.#.##.##.
...#..##.#..####....##..#..###.#.######.###.#########..#..#.##...#..#.
###.##..#.#..###.#.......##.##.##.#####....#####.##.##.##..####..####.
.#####..#.#.#...##..#.#...#######.......###..#.####.#..##.######.#.#..
#.#..#######....##.#.#..#.#..###.#.#...##.#...#..#....#.####..#..#....
##..#.#...#..#######......#..#.#...#########.#.#..#...#.#####...###.#.
.######.##..#.#..##.........###..####.....##...#..#..#...##.##.######.
#####.#####.#..#.###..###..#...#.##.#.##.###.#.#.###.#####...#.##..#..
#...#.#...##......####.#..#.##..#..####....#.#.#...#.#.....##....#...#
####.###...##...#..#..###....#.##..#.#.##...###...#.#.#.....#.##..#.##
.#.###.#.##.#.##.#..#....#..#.####.#.#.......#..#..#..#.#.#..#..#..#.#
..#......#.#.###.#######.#...###########.##.##.##..##.##.....#.#..##..
##..#.#.#..###...#...#######..##.#.#.##.##..#.#..##.....###..#.##.###.
#...###....#.#....#####.####..#..#.#.#...###....#.#.#.##...####..#...#
##.####.#...####.##.##.#...#..#..##...#.##..#.#.#...#.#...#..#####.##.
###.#.#..#..###..##.#.#....#..#...##.#..##.#.##...##.#....##.#.#..##..
..#....##..####..#..######.##..####.#...##.#.##.###..#..##..##.##....#
##.###.##..#.....##.#.##....##.###.#.##..##.#...#...#.#..#..#.#.##....
.#..##.....###....#....###..###..#..#.#..#..####.#..###.#.##...##....#
#.#..#..#..#..####.####.....######....#...##.#..###.#...#.#.#.#.###...
##..#..##.#.#.##.......#.####.#.#.##.#.#.#..#.####.#.#.#####......#.#.
##.#.#...##....#..##..#......######.#..#.#.###.......##.#.##.#...#####
##..##########..#..#.....##...####.##.#.##..#.......######.#.##...#.#.
#.##.#.########.##..##.##..#.#.#...#.#..##..#...#..##.#.#####.#.#.###.
.###.#....###..######.##.########.########...##.#.#####.###.##..#.#...
....#.#.##.##..#####..#####.#.#.#...####.#.#..#....#.#.##...#..#.#.###
.#####......#.##.#######.#.#.#.##.#.#####..##..##.....###.##.###..#..#
#...#..#.#####.#.#...#..#..####.#..####..###.#...#.#.....####.##.#####
#..##......##...##.#..##.....#.##..#..##.##.#.#.#.......##.##..#.####.
#######..###.##.##.###.##..#.##..#...#.###....#.###...#...##...#..#..#
..######...##.#.#..#####.#.#######.###.....##.#.###.......##.#####..##
.#..#####.......#........#...#..###.######...####.#..##...###.##.....#
..##......#..#.####..##...#..###..##.....#..#...#..#.##.##....#.###...
#..####.##.#..###.##.##.#...##....#.##.#.###.##....####...#.....##.#..
..####...###.##.#..#....###...#.....######.####...##.##.#...#...####..
..#...#.#..###.#......##...##...#.....###.####.....##.#.#..###.#.#.###
..######..##...#..###.#....#..####.##..#...##.##..###.######.#..#.##.#

"
    .to_string();
}
